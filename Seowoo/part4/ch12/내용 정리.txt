메모리 기반
KNN
-> 모든 정보를 메모리에 적재해야함으로 리소스가 필요

- 유저기반
아이템 선호도가 비슷한 유저를 탐색하그 그 유저가 선택한 다른 아이템을 추천하는 방법
- 아이템 기반
유저들의 선호도가 비슷한 아이템을 탐색하고 유저가 기존에 선호한 아이템과 유사한 아이템을 추천

KNN 협업필터링 -> 이때 이웃은 아이템 또는 유저가 될 수 있다.
- 유저별 아이템 선호도 예측 가능
	1. KNN Basic
		1.1 유저 기반
			1.1.1 유저간의 유사도를 계산
			1.1.2 아이템 i를 평가한 유저들 중에서 유저 u와 비슷한 유저 k명을 찾는다.
			1.1.3 k명의 유사한 유저들이 아이템 i에 평가한 선호도를 유사도 기준으로 가중 평균한다.
			1.1.4 예측 선호도가 높은 아이템을 유저에게 추천한다.
		1.2 아이템 기반
			1.2.1 아이템간의 유사도를 계산한다.
			1.2.2 아이템i와 비슷한 아이템을 k개 찾는다.
			1.2.3 유저가 평가한 k개의 아이템의 선호도를 유사도 기준으로 가중 평균한다.
			1.2.4 예측 선호도가 높은 아이템을 유저에게 추천한다.
	2. KNN with Means(가중치) - 선호도의 평균에 선호도 편차를 유사도 기준으로 가중 평균을 더하는 방법(유저나 아이템의 편균 선호도를 반영한다.)
		2.1 유저 기반
			2.1.1 유저 간의 유사도를 계산한다.
			2.1.2 아이템 i를 평가한 유저들 중에서 유저 u와 비슷한 유저 k명을 찾는다.
			2.1.3 아이템 i의 평균 선호도를 계산한다.
			2.1.4 k명의 유사한 유저들이 아이템 i에 평가한 선호도의 편차르 ㄹ유사도 기준으로 가중 평균한다.
			2.1.5 예측 선호도가 높은 아이템을 유저에게 추천한다.

		2.2 아이템 기반
			2.2.1 아이템간의 유사도를 계산한다.
			2.2.2 아이템 i와 비슷한 아이템을 k개 찾는다.
			2.2.3 아이템i의 평균 선호도를 계산한다.
			2.2.4 유저가 평가한 k개의 아이템의 선호도의 편차를 유사도 기준으로 가중 평균한다.
			2.2.5 예측 선호도가 높은 아이템을 유저에게 추천한다.
			* 아이템 간의 평균 선호도를 계산해 더해 줌으로써 모둘 추천 하지 않을 수도 있다.

모델기반
Matrix Factorization
-> 학습된 모델만 사용
유저-아이템 행렬을 유저와 아이템 행렬로 분해하는 방법

Gradient Descent를 이용한 Matrix Factorization 학습
	1. P와 Q를 랜덤 값으로 초기화
	2. 예측 R 계산
	3. R과 예측한 R의 오차 계산
	4. Gradient Descent를 이용해 P와 Q를 업데이트
	5. 2~4 과정 반복
